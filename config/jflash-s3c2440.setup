/*********************************************************************
*
* SEGGER J-Link ARM Setup File - Generated by J-Flash V6.44b
*
* Syntax:
*
*   SetJTAGSpeed(Speed);         : Sets the JTAG speed [kHz], (0 = Auto, 0xFFFF = Adaptive)
*   Delay(Delay);                : Waits a given time [msec]
*   DisableMMU(RAMAddr);         : Disables the MMU
*   DisableChecks();             : Disables mode check after read operations
*   EnableChecks();              : Enables mode check after read operations
*   Go();                        : Starts the core
*   Halt();                      : Halts the core
*
*   Reset(Delay);                : Resets the target (normal)
*   ResetWP();                   : Resets the target (using watchpoint)
*   ResetDBGRQ();                : Resets the target (using DBGRQ)
*   ResetBP0(Delay);             : Resets the target (using breakpoint @ addr 0)
*   ResetADI();                  : Resets the target (using ADI software reset)
*
*   Read8 (Addr);                : Reads a 8/16/32 bit value,
*   Read16(Addr);                :   Addr = address to read (as hex value)
*   Read32(Addr);                :
*
*   Verify8 (Addr, Data);        : Verifies a 8/16/32 bit value,
*   Verify16(Addr, Data);        :   Addr = address to verify (as hex value)
*   Verify32(Addr, Data);        :   Data = data to verify (as hex value)
*
*   Write8 (Addr, Data);         : Writes a 8/16/32 bit value,
*   Write16(Addr, Data);         :   Addr = address to write (as hex value)
*   Write32(Addr, Data);         :   Data = data to write (as hex value)
*
*   WriteVerify8 (Addr, Data);   : Writes and verifies a 8/16/32 bit value,
*   WriteVerify16(Addr, Data);   :   Addr = address to write (as hex value)
*   WriteVerify32(Addr, Data);   :   Data = data to write (as hex value)
*
*   WriteRegister(Reg, Data);    : Writes a register
*   WriteJTAG_IR(Cmd);           : Writes the JTAG instruction register
*   WriteJTAG_DR(nBits, Data);   : Writes the JTAG data register
*
*   VarAND(Data);                : VAR = VAR AND Data
*   VarOR (Data);                : VAR = VAR OR  Data
*   VarXOR(Data);                : VAR = VAR XOR Data
*   VarBEQ(Index);               : Execute branch
*
*   VarWrite8 (Addr);            : Writes the value of VAR as 8/16/32 bit value,
*   VarWrite16(Addr);            :   Addr = address to write (as hex value)
*   VarWrite32(Addr);            :
*
**********************************************************************
*/

SetJTAGSpeed(4000);
Reset(0, 0);                            // Reset and halt target
Write32(0x53000000, 0x00000000);
SetJTAGSpeed(4000);
